# Mocha/Jasmine + Chai + ES6
snippet describe
describe('${1:something_happens}', () => {
	${2:// test_stuff}
});
endsnippet

snippet before
beforeEach(() => {
	${1:// do_stuff}
});
endsnippet

snippet after
afterEach(() => {
	${1:// do_stuff}
});
endsnippet

snippet it
it('should ${1:do_something}', () => {
	${2:// expect_something}
});
endsnippet

snippet ethbc
expect(${1:method}).to.have.been.called;
endsnippet

snippet ethbcw
expect(${1:method}).to.have.been.calledWith(${2:args});
endsnippet

snippet etbt
expect(${1:value}).to.be.true;
endsnippet

snippet etbf
expect(${1:value}).to.be.false;
endsnippet

snippet ete
expect(${1:value}).to.equal(${2:prop});
endsnippet

snippet etde
expect(${1:value}).to.eql(${2:prop});
endsnippet

snippet etbaf
expect(${1:value}).to.be.a.func;
endsnippet

snippet etbab
expect(${1:value}).to.be.a.boolean;
endsnippet

snippet spy
sandbox.spy()
endsnippet

snippet stub
sandbox.stub()
endsnippet

snippet stubm
sandbox.stub(${1:object}, '${2:method}');
endsnippet

snippet testservice
'use strict';

import { expect } from 'chai';
import sinon from 'sinon';

describe('${1:test_name}', () => {
  let sandbox, actual, stubs, request, response;

  beforeEach(() => {
    sandbox = sinon.sandbox.create();

	stubs = {};
	request = {};
	response = {};
  });

  afterEach(() => {
	sandbox.restore();
  });

  describe('${2:method}', () => {
	beforeEach(() => {
	});

	it('should do something', () => {
	});
  });
});
endsnippet

snippet test
'use strict';

import { expect } from 'chai';
import sinon from 'sinon';

describe('${1:test_name}', () => {
  let sandbox, actual, stubs;

  beforeEach(() => {
    sandbox = sinon.sandbox.create();

	stubs = {};
  });

  afterEach(() => {
	sandbox.restore();
  });

  describe('${2:method}', () => {
	beforeEach(() => {
	});

	it('should do something', () => {
	});
  });
});
endsnippet

snippet testangular
'use strict';

import { expect } from 'chai';
import sinon from 'sinon';
import angular from 'angular';

describe('${1:test_name}', () => {
  let sandbox, actual, stubs;

  beforeEach(angular.mock.module('${2:module_name}'));
  beforeEach(angular.mock.module('ngoms.mock'));

  beforeEach(inject($injector => {
    sandbox = sinon.sandbox.create();

	stubs = {};
  }));

  afterEach(() => {
	sandbox.restore();
  });

  describe('${3:method}', () => {
	beforeEach(() => {
	});

	it('should do something', () => {
	});
  });
});
endsnippet
