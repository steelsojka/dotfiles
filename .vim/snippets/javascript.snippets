# Angular injector
snippet $inj
	let ${1:injected_name} = $injector.get("$1");
snippet $injt
	this.${1:injected_name} = $injector.get("$1");
snippet $injp
	${1:injected_name}: $injector.get("$1"),

# jsdocs
snippet @func
	/**
	 * ${1:description}
	 *
	 * @func
	 * ${2:params}
	 * ${3:return_value}
	 */
snippet @mo
	@methodOf ${1:namespace}
snippet @p
	@param {${1:type}} ${2:name} ${3:description}
snippet @po
	@param {${1:type}} [${2:name}] ${4:description}
snippet @po=
	@param {${1:type}} [${2:name}=${3:default_value}] ${4:description}
snippet @r
	@returns {${1:type}} ${2:description}
snippet @pr
	@private
snippet @class
	/**
	 * @classdesc ${1:class_description}
	 * @public
	 * @example
	 * ${2:example}
	 */

# Mocha/Jasmine + Chai
snippet describe
	describe("${1:something_happens}", function() {
		${2:// test_stuff}
	});
snippet beforeEach
	beforeEach(function() {
		${1:// do_stuff}
	});
snippet afterEach
	afterEach(function() {
		${1:// do_stuff}
	});
snippet it
	it("should ${1:do_something}", function() {
		${2:// expect_something}
	});
snippet expectspy
	expect(${1:method}).to.have.been.called;
snippet expectspyw
	expect(${1:method}).to.have.been.calledWith(${2:args});
snippet expectt
	expect(${1:value}).to.be.true;
snippet expectf
	expect(${1:value}).to.be.false;
snippet expect=
	expect(${1:value}).to.equal(${2:prop});
snippet expect=d
	expect(${1:value}).to.eql(${2:prop});
