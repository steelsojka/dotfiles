snippet angshort
	var bind = angular.bind;
	var forEach = angular.forEach;
	var isDefined = angular.isDefined;
	var noop = angular.noop;
snippet angis
	var isFunction = angular.isFunction;	
	var isNumber = angular.isNumber;	
	var isObject = angular.isObject;	
	var isString = angular.isString;	
	var isDefined = angular.isDefined;	
	var isElement = angular.isElement;	
	var isDate = angular.isDate;	
	var isArray = angular.isArray;	
	var isUndefined = angular.isUndefined;	
snippet angdirective
	angular.module("${1:module_name}").directive("${2:directive_name}", [function() {
		return {
			restrict: "EA",
			link: function(scope, element, attrs) {

			}
		};
	}]);
snippet angservice
	angular.module("${1:module_name}").factory("${2:service_name}", [function() {

		var bind = angular.bind;
		var forEach = angular.forEach;
		var isDefined = angular.isDefined;
		var noop = angular.noop;

		var $2 = {};

		return $2;
	}]);
snippet angserviceclass
	angular.module("${1:module_name}").factory("${2:service_name}", [function() {

		var bind = angular.bind;
		var forEach = angular.forEach;
		var isDefined = angular.isDefined;
		var noop = angular.noop;

		var $2 = function() {};

		$2.prototype = {};

		return $2;
	}]);

snippet angcontroller
	angular.module("${1:module_name}").controller("${2:controller_name}", ["$scope", function($scope) {
		
	}]);
snippet $inj
	var ${1:injected_name} = $injector.get("$1");

snippet jasdefine
	define([
		"${1:module_name}"
	], function(${2:module_alias}) {

		describe("${3:module_path}", function() {
			beforeEach(function() {
			});

			afterEach(function() {
			});

			it("${4:test}", function() {
			});
		});
	});
snippet jasdirective
	describe("${1:directive_name} - Directive", function() {
		var $compile, $rootScope, scope, el;	
	
		beforeEach(module("${2:module_name}"));

		beforeEach(inject(function($injector) {
			$compile = $injector.get("$compile");
			$rootScope = $injector.get("$rootScope");
			scope = $rootScope.$new();
			el = $compile("${3:html}")(scope);
		}));

		it("${4:test_description}", function() {
			// Test here
		});
	});
snippet jasservice
	describe("${1:service_name} - Service", function() {
		var $1;	
	
		beforeEach(module("${2:module_name}"));

		beforeEach(inject(function($injector) {
			$1 = $injector.get("$1");
		}));

		it("${3:test_description}", function() {
			// Test here
		});
	});
snippet	jasfilter 
	describe("${1:filter_name} - Filter", function() {
		var $1;
	
		beforeEach(module("${2:module_name}"));

		beforeEach(inject(function($injector) {
			$filter = $injector.get("$filter");
			$1 = $filter("$1");
		}));

		it("${3:test_description}", function() {
			// Test here
		});
	});
snippet jascontroller
	describe("${1:controller_name} - Controller", function() {
		var $1, $rootScope, $controller, $scope;

		beforeEach(module("${2:module_name}"));

		beforeEach(inject(function($injector) {
			$controller = $injector.get("$controller");
			$rootScope = $injector.get("$rootScope");
			$scope = $rootScope.$new();
			$1 = $controller("$1", { $scope: $scope });
		}));

		afterEach(function() {
			$scope.$destroy();
		});

		it("${3:test_description}", function() {
			// Test here	
		});
	});
snippet jasit
	it("${1:test_description}", function() {
		// Test here	
	});

snippet ngdocdir
	/**
	 * @ngdoc directive
	 * @name ${1:directive_module}:${2:directive_name}
	 * @restrict ${3:restrictions}
	 * @description
	 *
	 * ${4:directive_description}
	 */
snippet ngdocser
	/**
	 * @ngdoc service
	 * @name ${1:service_module}.${2:service_name}
	 * @description
	 *
	 * ${3:service_description}
	 */
snippet ngdocmeth
	/**
	 * @ngdoc method
	 * @name ${1:service_module}.${2:service_name}#${3:method_name}
	 * @methodOf $1.$2
	 * @description
	 *
	 * ${4:method_description}
	 */
snippet @func
	/**
	 * ${1:description}
	 *
	 * @func
	 * ${2:params}
	 * ${3:return_value}
	 */
snippet @mo
	@methodOf ${1:namespace}
snippet @p
	@param {${1:type}} ${2:name} ${3:description}
snippet @po
	@param {${1:type}} [${2:name}] ${4:description}
snippet @po=
	@param {${1:type}} [${2:name}=${3:default_value}] ${4:description}
snippet @r
	@returns {${1:type}} ${2:description}
snippet @pr
	@private
snippet @class
	/**
	 * @classdesc ${1:class_description}
	 * @public
	 * @example
	 * ${2:example}
	 */

snippet describe
	describe("when ${1:something_happens}", function() {
		${2:test_stuff}
	});

snippet beforeEach
	beforeEach(function() {
		${1:do_stuff}
	});

snippet afterEach
	afterEach(function() {
		${1:do_stuff}
	});

snippet it
	it("should ${1:do_something}", function() {
		${2:expect_something}
	});

snippet expect
	expect(${1:something}).${2:toBe}(${3:something});

snippet define
	define([
		'${1: module_path}'
	], function(${2:module_name}) {
	});
